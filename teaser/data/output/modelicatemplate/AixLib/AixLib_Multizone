within ${mod_prj}.${bldg.name};
model ${bldg.name}
  "This is the simulation model of ${bldg.name}"

% if model == "Multizone":
  AixLib.ThermalZones.ReducedOrder.Multizone.Multizone multizone(
    redeclare package Medium = Modelica.Media.Air.SimpleAir,
    buildingID=${get_id(bldg.building_id)},
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
    T_start = ${bldg.thermal_zones[0].t_inside},
    VAir = ${bldg.volume},
    ABuilding=${bldg.net_leased_area},
    ASurTot=${get_total_surface_area(bldg)},
    numZones = ${get_n(bldg.thermal_zones)},
    zoneParam = {
      %for i in bldg.thermal_zones:
	  %if i == bldg.thermal_zones[-1]:
	   ${bldg.name}_DataBase.${bldg.name}_${i.name}()
	  %else:
	   ${bldg.name}_DataBase.${bldg.name}_${i.name}(),
	  %endif
      %endfor
      },
    zone(ROM(extWallRC(thermCapExt(each der_T(fixed=true))),
             intWallRC(thermCapInt(each der_T(fixed=true))),floorRC
             (thermCapExt(each der_T(fixed=true))),roofRC(thermCapExt(each
             der_T(fixed=true))))),

% if zone == "ThermalZone":
    redeclare model thermalZone =
        AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZone,
% else:
    redeclare model thermalZone =
        AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZoneEquipped,
%   endif

% if gFac is True:
    redeclare model corG =
        AixLib.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane
% else:
    redeclare model corG =
        AixLib.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane
%   endif
    )

    "Multizone"
	annotation (Placement(transformation(extent={{32,-8},{52,12}})));

  AixLib.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
    calTSky=AixLib.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,
    computeWetBulbTemperature=false,
    filNam="${weather.replace("\\", "/")}"))
    "Weather data reader"
    annotation (Placement(transformation(extent={{-82,30},{-62,50}})));

  AixLib.BoundaryConditions.WeatherData.Bus weaBus
    "Weather data bus"
    annotation (Placement(transformation(extent={{-68,-10},{-34,22}}),
    iconTransformation(extent={{-70,-12},{-50,8}})));

  Modelica.Blocks.Routing.Replicator replicatorTemperatureVentilation(nout=${get_n(bldg.thermal_zones)})
    "Replicates dry bulb air temperature for numZones"
    annotation (Placement(transformation(
    extent={{-5,-5},{5,5}},
    rotation=0,
    origin={-31,-13})));

  Modelica.Blocks.Sources.CombiTimeTable tableInternalGains(
    tableOnFile=true,
    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
    tableName="Internals",
    fileName=Modelica.Utilities.Files.loadResource(
        "modelica://${mod_prj}/${bldg.name}/${bldg.file_internal_gains}"),
    columns=2:${(3*get_n(bldg.thermal_zones))+1})
    "Profiles for internal gains"
    annotation (Placement(transformation(extent={{72,-42},{56,-26}})));

  Modelica.Blocks.Sources.CombiTimeTable tableInfiltrationRate(table=[
  0
  % for tz in bldg.thermal_zones:
    ,${tz.infiltration_rate} ${';' if (loop.last) else ''}
  %endfor
  3600
  % for tz in bldg.thermal_zones:
    ,${tz.infiltration_rate}
  %endfor
  ])
    annotation (Placement(transformation(extent={{-36,-38},{-24,-26}})));


equation
  connect(weaDat.weaBus,weaBus)  annotation (Line(
      points={{-62,40},{-51,40},{-51,6}},
      color={255,204,51},
      thickness=0.5), Text(
      string="%second",
      index=1,
      extent={{6,3},{6,3}}));
  connect(weaDat.weaBus, multizone.weaBus) annotation (Line(
      points={{-62,40},{-32,40},{-32,6},{34,6}},
      color={255,204,51},
      thickness=0.5));
  connect(weaBus.TDryBul, replicatorTemperatureVentilation.u) annotation (Line(
      points={{-51,6},{-44,6},{-44,-12},{-37,-12},{-37,-13}},
      color={255,204,51},
      thickness=0.5), Text(
      string="%first",
      index=-1,
      extent={{-6,3},{-6,3}}));
  connect(replicatorTemperatureVentilation.y, multizone.ventTemp) annotation (
      Line(points={{-25.5,-13},{-20,-13},{-20,3.8},{33,3.8}}, color={0,0,127}));
  connect(tableInternalGains.y, multizone.intGains)
    annotation (Line(points={{55.2,-34},{48,-34},{48,-9}}, color={0,0,127}));
  connect(tableInfiltrationRate.y, multizone.ventRate) annotation (Line(points={{
          -23.4,-32},{0,-32},{0,1},{33,1}}, color={0,0,127}));

  annotation (experiment(
      StopTime=${modelica_info.runtime_simulation},
      Interval=${modelica_info.interval_output},
      __Dymola_Algorithm="${modelica_info.current_solver}"),
      __Dymola_experimentSetupOutput(__Dymola_experimentSetupOutput(equidistant=${get_true_false(modelica_info.equidistant_output)},
      events=${get_true_false(modelica_info.results_at_events)}),
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
        graphics={
        Line(points={{80,-82}}, color={28,108,200}),
        Rectangle(
          extent={{-80,20},{80,-80}},
          lineColor={0,0,0},
          lineThickness=0.5),
        Line(
          points={{-80,20},{0,100},{80,20}},
          color={0,0,0},
          thickness=0.5),
        Text(
          extent={{-52,-10},{62,-48}},
          lineColor={0,0,0},
          lineThickness=0.5,
          fillColor={0,0,255},
          fillPattern=FillPattern.Solid,
          textString="TB")}));
end ${bldg.name};

% elif model == "MultizoneEquipped":
  AixLib.ThermalZones.ReducedOrder.Multizone.MultizoneEquipped multizone(
    redeclare package Medium = Modelica.Media.Air.SimpleAir,
    buildingID=${get_id(bldg.building_id)},
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
    T_start = ${bldg.thermal_zones[0].t_inside},
    VAir = ${bldg.volume},
    ABuilding=${bldg.net_leased_area},
    ASurTot=${get_total_surface_area(bldg)},
    numZones = ${get_n(bldg.thermal_zones)},
    zoneParam = {
      %for i in bldg.thermal_zones:
	  %if i == bldg.thermal_zones[-1]:
	   ${bldg.name}_DataBase.${bldg.name}_${i.name}()
	  %else:
	   ${bldg.name}_DataBase.${bldg.name}_${i.name}(),
	  %endif
      %endfor
      },
% if bldg.central_ahu:
	heatAHU=${get_true_false(bldg.central_ahu.heating)},
    coolAHU=${get_true_false(bldg.central_ahu.cooling)},
    dehuAHU=${get_true_false(bldg.central_ahu.dehumidification)},
    huAHU=${get_true_false(bldg.central_ahu.humidification)},
    BPFDehuAHU=${bldg.central_ahu.by_pass_dehumidification},
    HRS=${get_true_false(bldg.central_ahu.heat_recovery)},
    sampleRateAHU=${bldg.central_ahu.sample_rate},
    effFanAHU_sup=${bldg.central_ahu.efficiency_fan_supply},
    effFanAHU_eta=${bldg.central_ahu.efficiency_fan_return},
    effHRSAHU_enabled=${bldg.central_ahu.efficiency_recovery},
    effHRSAHU_disabled=${bldg.central_ahu.efficiency_revocery_false},
    dpAHU_sup=${bldg.central_ahu.pressure_drop_fan_supply},
    dpAHU_eta=${bldg.central_ahu.pressure_drop_fan_return},
% else:
	heatAHU = false,
	coolAHU = false,
	dehuAHU = false,
	huAHU = false,
	BPFDehuAHU = 0.2,
	HRS = false,
	sampleRateAHU=1800,
    effFanAHU_sup=0.7,
    effFanAHU_eta=0.7,
	effHRSAHU_enabled = 0.8,
	effHRSAHU_disabled = 0.2,
	dpAHU_sup=800,
    dpAHU_eta=800,
% endif
    zone(ROM(extWallRC(thermCapExt(each der_T(fixed=true))),
             intWallRC(thermCapInt(each der_T(fixed=true))),floorRC
             (thermCapExt(each der_T(fixed=true))),roofRC(thermCapExt(each
             der_T(fixed=true))))),

% if zone == "ThermalZone":
    redeclare model thermalZone =
        AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZone,
% else:
    redeclare model thermalZone =
        AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZoneEquipped,
%   endif

% if gFac is True:
    redeclare model corG =
        AixLib.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane,
% else:
    redeclare model corG =
        AixLib.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane,
%   endif
% if check_AHU(bldg.thermal_zones) == False:
    redeclare model AHUMod = AixLib.Airflow.AirHandlingUnit.NoAHU)
% else:
    redeclare model AHUMod = AixLib.Airflow.AirHandlingUnit.AHU)
% endif
    "Multizone"
    annotation (Placement(transformation(extent={{32,-8},{52,12}})));

  AixLib.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
    calTSky=AixLib.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,
    computeWetBulbTemperature=false,
    filNam=
      "${weather.replace("\\", "/")}")
    "Weather data reader"
    annotation (Placement(transformation(extent={{-82,30},{-62,50}})));

  Modelica.Blocks.Sources.CombiTimeTable tableInternalGains(
    tableOnFile=true,
    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
    tableName="Internals",
    fileName=Modelica.Utilities.Files.loadResource(
        "modelica://${mod_prj}/${bldg.name}/${bldg.file_internal_gains}"),
    columns=2:${(3*get_n(bldg.thermal_zones))+1})
    "Profiles for internal gains"
    annotation (Placement(transformation(extent={{72,-42},{56,-26}})));

  Modelica.Blocks.Sources.CombiTimeTable tableAHU(
    tableOnFile=true,
    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
    tableName="AHU",
    columns=2:5,
    fileName=Modelica.Utilities.Files.loadResource(
        "modelica://${mod_prj}/${bldg.name}/${bldg.file_ahu}"))
    "Boundary conditions for air handling unit"
    annotation (Placement(transformation(extent={{-64,-6},{-48,10}})));

  Modelica.Blocks.Sources.CombiTimeTable tableTSet(
    tableOnFile=true,
    tableName="Tset",
    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
    fileName=Modelica.Utilities.Files.loadResource(
        "modelica://${mod_prj}/${bldg.name}/${bldg.file_set_t}"),
    columns=2:${get_n(bldg.thermal_zones)*2+1})
    "Set points for heater and cooler"
    annotation (Placement(transformation(extent={{72,-66},{56,-50}})));

% if bldg.thermal_zones is not None:
  Modelica.Blocks.Sources.CombiTimeTable tableZoneTemperature(
    tableOnFile=true,
    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
    tableName="zoneTemperatureData",
    fileName=Modelica.Utilities.Files.loadResource(
        "${bldg.file_zone_t}"),
    columns=2:${(get_n(bldg.thermal_zones))+1})
    "Measured zone temperature (validation data)"
    annotation (Placement(transformation(extent={{-64,-60},{-48,-44}})));
    % endif

equation
  connect(weaDat.weaBus, multizone.weaBus) annotation (Line(
      points={{-62,40},{-32,40},{-32,6},{34,6}},
      color={255,204,51},
      thickness=0.5));

  connect(tableInternalGains.y, multizone.intGains)
    annotation (Line(points={{55.2,-34},{48,-34},{48,-9}}, color={0,0,127}));

  connect(tableAHU.y, multizone.AHU)
    annotation (Line(points={{-47.2,2},{14,2},{33,2}}, color={0,0,127}));

  connect(tableTSet.y[1:${get_n(bldg.thermal_zones)}], multizone.TSetHeat) annotation (Line(points={{55.2,-58},
          {36.8,-58},{36.8,-9}}, color={0,0,127}));

  connect(tableTSet.y[${get_n(bldg.thermal_zones)+1}:${get_n(bldg.thermal_zones)*2}], multizone.TSetCool) annotation (Line(points={{55.2,-58},{
          34.6,-58},{34.6,-9}}, color={0,0,127}));

  annotation (experiment(
      StopTime=${modelica_info.runtime_simulation},
      Interval=${modelica_info.interval_output},
      __Dymola_Algorithm="${modelica_info.current_solver}"),
      __Dymola_experimentSetupOutput(equidistant=${get_true_false(modelica_info.equidistant_output)},
      events=${get_true_false(modelica_info.results_at_events)}),
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
        graphics={
        Line(points={{80,-82}}, color={28,108,200}),
        Rectangle(
          extent={{-80,20},{80,-80}},
          lineColor={0,0,0},
          lineThickness=0.5),
        Line(
          points={{-80,20},{0,100},{80,20}},
          color={0,0,0},
          thickness=0.5),
        Text(
          extent={{-52,-10},{62,-48}},
          lineColor={0,0,0},
          lineThickness=0.5,
          fillColor={0,0,255},
          fillPattern=FillPattern.Solid,
          textString="TB")}));
end ${bldg.name};
% endif

##list to string
<%def name="list_to_string(list)", filter="trim">
  <%
  string_of_list = ""
  for item in list:
    string_of_list += str(item) + ", "
  string_of_list = string_of_list[:-2]
  return string_of_list
  %>
</%def>

##get n
<%def name="get_n(list)", filter="trim">
  <%
  n=0
  for element in list:
    if type(element).__name__ == "ThermalZone":
      n += 1
    else:
      pass
  return n
  %>
</%def>

##check if AHU is active
<%def name="check_AHU(list)", filter="trim">
  <%
  check = False
  for element in list:
    if element.use_conditions.with_ahu == True:
      check = True
      return check
    else:
      pass
return check
  %>
</%def>

##check if building id is integer
<%def name="get_id(value)", filter="trim">
  <%
  try:
    return_value = int(value)
  except:
    return_value = 0
  return return_value
  %>
</%def>

##get total surface area of all walls and windows
<%def name="get_total_surface_area(bldg)", filter="trim">
  <%
  surface_area=0
  for zone in bldg.thermal_zones:
    surface_area += zone.area_ow + zone.area_iw + zone.area_rt + \
    zone.area_gf + zone.area_win
  return surface_area
  %>
</%def>

##get false
<%def name="get_true_false(value)", filter="trim">
  <%
  if value == False:
    return "false"
  elif value == True:
    return "true"
  else:
    return value
  %>
</%def>
